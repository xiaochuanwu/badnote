# 集合  
Java标准库``java.util``包提供了集合类：``Collection``，所有其他集合类都是以他作为根接口（``Map``除外）。  
  
  主要有一下三种集合：    
* ``List``：**一种有序列表的集合**  
* ``Set``：**一种保证没有重复元素的集合**  
* ``Map``：**一种通过键值查找的映射表集合**  
需要注意的是以上均为接口，他们拥有不同的实现类，例如``List``有``ArrayList``，``LinkedList``等格式。  
不同类型的集合在处理不同问题时性能也不相同。例如``List``适合经常追加数据，插入，删除数据。但随即取数效率比较低。而``Set``适合经常地随即储存，插入，删除。但是在遍历时效率比较低。  
***
## List  
``List``是一种有序表。   
几个常用的``List<E>``接口方法：
* ``boolean add(E e)`` 在末尾添加一个元素。   
* ``boolean add(int index, E e)`` 在指定索引添加一个元素。  
* ``boolean remove(Object e)`` 删除指定元素。  
* ``E remove(int index)``  删除指定索引元素。  
* ``E get(int index)`` 获取指定索引元素。  
* ``int size()`` 获取链表大小。    
### Arrayist
``ArrayList``在内部使用数组存储元素。当我们添加元素但数组已满时，``ArrayList``会自动创建一个更大的数组并将旧数组的元素复制到新数组，用新数组取代旧数组。  
``ArrayList``将添加元素与删除元素的操作封装起来，使我们可以随意使用而不用关心数组内部的元素如何移动。   
### LinkedList
``LinkedList``在指定位置添加或删除元素时不需要移动元素，但通常``LinkedList``获取元素的速度与内存占用都不如``ArrayList``。    
## 遍历List
**迭代器``Iterator``**，通过``Iterator``遍历``List``是最高效的办法。
``Iterator``对象有两种方法：``boolean hasNext()``用来判断是否有下一个元素，``E next()``用来返回下一个元素。
   
 `` List<String> list = new ArrayList<>();``   
        ``list.add("石老板");``   
        ``list.add("帅");``   
        ``list.add("!");``   
        ``for (Iterator<String> it = list.iterator(); it.hasNext(); ) {``   
            ``String s = it.next();``   
            ``System.out.println(s);``    
			   
``for each``会自动使用``Iterator``迭代器：  
`` List<String> list = new ArrayList<>();``   
        ``list.add("石老板");``   
        ``list.add("帅");``   
        ``list.add("!");``   
		``for(String s : list){``
		  ``System.out.println(s);``      
		``}``     
## List的toArray()方法
* 调用``toArray()``方法   
``Object[] array = list.toArray();``   
该方法不能指定转换数组的类型，返回值只能是``Object()``数组，所以得到返回值后往往需要做类型转换，将``Object[]``转换为我们需要的类型。但是，往往在转换这一部会出问题。    
* ``toArray(T[] a)``方法   
给``toArray(T[])``传入一个类型相同的``Array``，``List``内部自动把元素复制到传入的``Array``中。    
``Integer[] array = list.toArray(new Integer[]);``    
``Number[] array = list.toArray(new Number[]);``
该方法要求用户提供一个目标对象的泛型，在数组转换后，会返回一个指定类型的数组，不存在类型转换错误。   
如果传入的数组不够大，那么``List``内部会创建一个新的刚好够大的数组，填充后返回；如果传入的数组比``List``元素还要多，那么填充完元素后，剩下的数组元素一律填充``null``。但最优的写法为：    
``Integer[] array = list.toArray(new Integer[list.size()]);``    
## Array转换为List
* List.of(T...)方法  
``Integer[] array = { 1, 2, 3 };``    
``List<Integer> list = List.of(array);``     
对只读List调用``add()``、``remove()``方法会抛出``UnsupportedOperationException``。     
***


